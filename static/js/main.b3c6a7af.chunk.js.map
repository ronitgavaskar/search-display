{"version":3,"sources":["components/search/search-bar.jsx","components/display/display.jsx","App.js","serviceWorker.js","index.js"],"names":["SearchBar","filterUsers","className","type","onChange","Display","searchedUsers","map","user","name","App","onSearch","e","setState","userName","target","value","state","allUsers","fetch","then","response","json","users","this","candidates","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"+TAeeA,G,YAVG,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAF,OACd,6BACI,2BACIC,UAAU,SACVC,KAAK,OACLC,SAAUH,OCGPI,G,MAVC,SAAC,GAAD,IAAEC,EAAF,EAAEA,cAAF,OACZ,yBAAKJ,UAAU,WAEPI,EAAcC,KAAI,SAAAC,GAAI,OAClB,2BAAIA,EAAKC,YC+CVC,E,YAhDb,aAAe,IAAD,8BACZ,+CAqBFC,SAAW,SAACC,GACV,EAAKC,SAAS,CAACC,SAAUF,EAAEG,OAAOC,SAnBlC,EAAKC,MAAQ,CACXC,SAAU,GACVJ,SAAU,IANA,E,iFAUO,IAAD,OAEhBK,MAAM,8CAGDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAG1BF,MAAK,SAAAG,GAAK,OAAI,EAAKV,SAAS,CAACK,SAAUK,S,+BAQtC,IAAD,SAGwBC,KAAKP,MAA5BC,EAHD,EAGCA,SAAUJ,EAHX,EAGWA,SAGZW,EAAaP,EAASQ,QAAO,SAAAlB,GAAI,OACrCA,EAAKC,KAAKkB,cAAcC,SAASd,EAASa,kBAI5C,OACI,yBAAKzB,UAAU,gBACb,kBAAC,EAAD,CACED,YAAa,SAAAW,GAAC,OAAI,EAAKD,SAASC,MAClC,kBAAC,EAAD,CACIN,cAAemB,S,GA3CXI,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b3c6a7af.chunk.js","sourcesContent":["import React from \"react\";\nimport './search-bar.css'\n\n// filterUsers belongs to props that are passed in. Notice how this doesn't have any logic associated. It just uses\n// filterUsers to determine what to do when onChange is triggered.\nconst SearchBar = ({filterUsers}) => (\n    <div>\n        <input\n            className=\"search\"\n            type=\"text\"\n            onChange={filterUsers}\n        />\n    </div>\n);\n\nexport default SearchBar;","import React from \"react\";\nimport './display.css'\n\nconst Display = ({searchedUsers}) => (\n    <div className=\"display\">\n        {\n            searchedUsers.map(user =>\n                <p>{user.name}</p>\n            )\n        }\n    </div>\n);\n\nexport default Display;\n","import React, {Component} from 'react';\nimport './App.css';\nimport SearchBar from \"./components/search/search-bar\";\nimport Display from \"./components/display/display\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    // initialize state with allUsers and userName\n    this.state = {\n      allUsers: [],\n      userName: \"\"\n    }\n  }\n\n  componentDidMount() {\n      // call the API\n      fetch('https://jsonplaceholder.typicode.com/users')\n\n          // get the data as a json response\n          .then(response => response.json())\n\n          // get resp body as \"users\" and set state.allUsers to be users\n          .then(users => this.setState({allUsers: users}))\n  }\n\n  // set this as an arrow function to not deal with the context\n  onSearch = (e) => {\n    this.setState({userName: e.target.value})\n  };\n\n  render() {\n\n\n    const { allUsers, userName } = this.state;\n\n    // filters allUsers to see which user contains userName\n    const candidates = allUsers.filter(user =>\n      user.name.toLowerCase().includes(userName.toLowerCase())\n    );\n\n    // when filterUsers is passed in, it triggers the setState determined within onSearch\n    return(\n        <div className=\"members-menu\">\n          <SearchBar\n            filterUsers={e => this.onSearch(e)}/>\n          <Display\n              searchedUsers={candidates}/>\n        </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}